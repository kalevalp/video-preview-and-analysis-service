frameworkVersion: ">=1.2.0 <2.0.0"

service: et-video-service # NOTE: update this with your service name

provider:
  name: aws
  runtime: nodejs10.x
  region: eu-west-2
  environment:
    WATCHTOWER_EVENT_KINESIS_STREAM:
      Ref: EventsStream
    # DEBUG_WATCHTOWER: 1    # Produces verbose debug prints
    # PROFILE_WATCHTOWER: 1  # Produces timing information
    SERVERLESS_STAGE: ${opt:stage, self:provider.stage}
    SERVERLESS_PROJECT: ${self:service}
    SERVERLESS_REGION: ${opt:region, self:provider.region}
    ACCOUNT: ${self:custom.secrets.ACCOUNT} # Using AWS::Account with SNS fails
    STATUS_TOPIC: video-status-topic-${opt:stage, self:provider.stage}
    SESSION_TOPIC_NAME: video-session-topic-${opt:stage, self:provider.stage}
    CAPTURE_TOPIC_NAME: video-capture-topic-${opt:stage, self:provider.stage}
    RENDER_START_TOPIC_NAME: video-render-start-topic-${opt:stage, self:provider.stage}
    RENDER_READY_TOPIC_NAME: video-render-ready-topic-${opt:stage, self:provider.stage}
    SOURCE_BUCKET:
      Ref: SourceBucket
    RENDER_BUCKET:
      Ref: RenderBucket
    SESSION_TABLE_NAME: ${self:provider.environment.SERVERLESS_PROJECT}-session-${self:provider.environment.SERVERLESS_PROJECT}-${self:provider.environment.SERVERLESS_STAGE}
    LABELS_TABLE_NAME: ${self:provider.environment.SERVERLESS_PROJECT}-labels-${self:provider.environment.SERVERLESS_PROJECT}-${self:provider.environment.SERVERLESS_STAGE}
    VIDEO_MAX_DURATION: 30 # (in seconds) limit video duration (0 = no limit)
  iamRoleStatements:
    - Effect: Allow             # Required for writing wt events
      Action:
        - 'kinesis:DescribeStream'
        - 'kinesis:PutRecord'
        - 'kinesis:PutRecords'
      Resource:
        Fn::GetAtt: [EventsStream, Arn]
    - Effect: Allow
      Action:
        - s3:ListBucket
      Resource:
        - "*"
    - Effect: Allow
      Action:
        - s3:PutObject
        - s3:GetObject
        - s3:DeleteObject
      Resource:
        - "*"
    - Effect: Allow
      Action:
      - dynamodb:*
      Resource: arn:aws:dynamodb:${self:provider.environment.SERVERLESS_REGION}:*:*
    - Effect: Allow
      Action:
      - SNS:*
      Resource: arn:aws:sns:${self:provider.environment.SERVERLESS_REGION}:*:*
    - Effect: Allow
      Action:
      - rekognition:DetectLabels
      Resource: "*"

package:
  include:
    - ffmpeg/ffmpeg
    - ffmpeg/ffprobe
  exclude:
    - test/**
    - .git/**
    - templates
    - ffmpeg/**
  individually: true

functions:
  watchtower-ingestion: ${file(watchtower/functions.yml):watchtower-ingestion}   # Event ingestion function
  watchtower-monitor:   ${file(watchtower/functions.yml):watchtower-monitor}     # Event monitor
  wt-monitor-trigger:   ${file(watchtower/functions.yml):wt-monitor-trigger}     # A function that triggers the event monitoring step-functions state machine

  create-session:
    handler: create-session/index${self:custom.handlerFilePostfix}.handler
    timeout: 15
    events:
      - sns: arn:aws:sns:${self:provider.environment.SERVERLESS_REGION}:${self:custom.secrets.ACCOUNT}:${self:provider.environment.SESSION_TOPIC_NAME}
  status:
    handler: status/index${self:custom.handlerFilePostfix}.handler
    timeout: 30
    events:
      - sns: ${self:provider.environment.STATUS_TOPIC}
      - schedule: rate(1 minute)
  get-labels:
    handler: get-labels/index${self:custom.handlerFilePostfix}.handler
    timeout: 30
    events:
      - sns: arn:aws:sns:${self:provider.environment.SERVERLESS_REGION}:${self:custom.secrets.ACCOUNT}:${self:provider.environment.CAPTURE_TOPIC_NAME}
  create-captures:
    handler: create-captures/index${self:custom.handlerFilePostfix}.handler
    memorySize: 1536
    timeout: 300
    events:
      - sns: arn:aws:sns:${self:provider.environment.SERVERLESS_REGION}:${self:custom.secrets.ACCOUNT}:${self:provider.environment.RENDER_START_TOPIC_NAME}
  create-gif:
    handler: create-gif/index${self:custom.handlerFilePostfix}.handler
    memorySize: 1536
    timeout: 300
    events:
      - sns: arn:aws:sns:${self:provider.environment.SERVERLESS_REGION}:${self:custom.secrets.ACCOUNT}:${self:provider.environment.RENDER_START_TOPIC_NAME}

plugins:
  - serverless-mocha-plugin
  - serverless-step-functions

custom:
  serverless-mocha-plugin:
    functionTemplate: templates/function.ejs
  secrets: ${file(../.secrets.yml)}
  # handlerFilePostfix: '-wrapper'
  # handlerFilePostfix: ''
  handlerFilePostfix: ${env:WT_RUN_NO_RECORDING, '-wrapper'}

stepFunctions:
  stateMachines:
    checker: ${file(watchtower/stateMachine.yml):stateMachines.checker}

resources:
  Outputs:
    WTCheckerMachine: ${file(watchtower/outputs.yml):Outputs.WTCheckerMachine}
    RenderBucket:
      Value:
        Ref: RenderBucket
      Export:
        Name: video-service-render-bucket-${self:provider.environment.SERVERLESS_STAGE}
    SourceBucket:
      Value:
        Ref: SourceBucket
      Export:
        Name: video-service-source-bucket-${self:provider.environment.SERVERLESS_STAGE}
    RenderReadyTopicArn:
      Value:
        Fn::Join:
          - ":"
          - - arn:aws:sns
            - Ref: AWS::Region
            - Ref: AWS::AccountId
            - Ref: RenderReadyTopic
      Export:
        Name: video-service-render-ready-topic-${self:provider.environment.SERVERLESS_STAGE}
  Resources:
    EventsTable:          ${file(watchtower/ddbTables.yml):Resources.EventsTable}
    CheckpointsTable:     ${file(watchtower/ddbTables.yml):Resources.CheckpointsTable}
    InvocationStream:     ${file(watchtower/kinesisStreams.yml):Resources.InvocationStream}
    EventsStream:         ${file(watchtower/kinesisStreams.yml):Resources.EventsStream}
    EventWriterRole:      ${file(watchtower/iamRoles.yml):Resources.EventWriterRole}
    EventReaderRole:      ${file(watchtower/iamRoles.yml):Resources.EventReaderRole}
    StateMachineListExec: ${file(watchtower/iamRoles.yml):Resources.StateMachineListExec}
    CaptureTopic:
      Type: AWS::SNS::Topic
      Properties:
        DisplayName: ${self:provider.environment.CAPTURE_TOPIC_NAME}
        TopicName: ${self:provider.environment.CAPTURE_TOPIC_NAME}
    RenderStartTopic:
      Type: AWS::SNS::Topic
      Properties:
        DisplayName: ${self:provider.environment.RENDER_START_TOPIC_NAME}
        TopicName: ${self:provider.environment.RENDER_START_TOPIC_NAME}
    RenderReadyTopic:
      Type: AWS::SNS::Topic
      Properties:
        DisplayName: ${self:provider.environment.RENDER_READY_TOPIC_NAME}
        TopicName: ${self:provider.environment.RENDER_READY_TOPIC_NAME}
    SessionTopic:
      Type: AWS::SNS::Topic
      Properties:
        DisplayName: ${self:provider.environment.SESSION_TOPIC_NAME}
        TopicName: ${self:provider.environment.SESSION_TOPIC_NAME}
    CaptureTopicPolicy:
      Type: AWS::SNS::TopicPolicy
      Properties:
        PolicyDocument:
          Id: CaptureTopicPolicy
          Version: '2012-10-17'
          Statement:
          - Sid: CaptureTopicPolicy-001
            Effect: Allow
            Principal:
              AWS: "*"
            Action: sns:Publish
            Resource:
              Ref: CaptureTopic
        Topics:
          - Ref: CaptureTopic
    RenderStartTopicPolicy:
      Type: AWS::SNS::TopicPolicy
      Properties:
        PolicyDocument:
          Id: RenderStartTopicPolicy
          Version: '2012-10-17'
          Statement:
          - Sid: RenderStartTopicPolicy-001
            Effect: Allow
            Principal:
              AWS: "*"
            Action: sns:Publish
            Resource:
              Ref: RenderStartTopic
        Topics:
          - Ref: RenderStartTopic
    RenderReadyTopicPolicy:
      Type: AWS::SNS::TopicPolicy
      Properties:
        PolicyDocument:
          Id: RenderReadyTopicPolicy
          Version: '2012-10-17'
          Statement:
          - Sid: RenderReadyTopicPolicy-001
            Effect: Allow
            Principal:
              AWS: "*"
            Action: sns:Publish
            Resource:
              Ref: RenderReadyTopic
        Topics:
          - Ref: RenderReadyTopic
    SessionTopicPolicy:
      Type: AWS::SNS::TopicPolicy
      Properties:
        PolicyDocument:
          Id: SessionTopicPolicy
          Version: '2012-10-17'
          Statement:
          - Sid: SessionTopicPolicy-001
            Effect: Allow
            Principal:
              AWS: "*"
            Action: sns:Publish
            Resource:
              Ref: SessionTopic
        Topics:
          - Ref: SessionTopic
    SourceBucket:
      Type: AWS::S3::Bucket
      DependsOn:
        - SessionTopic
        - CaptureTopic
      Properties:
        AccessControl: BucketOwnerFullControl
        # clean the bucket
        LifecycleConfiguration:
          Rules:
          - ExpirationInDays: 1
            Status: Enabled
        CorsConfiguration:
          CorsRules:
          - AllowedHeaders:
              - '*'
            AllowedMethods:
              - PUT
            AllowedOrigins:
              - '*'
            ExposedHeaders:
              - Date
            Id: CorsRule1
            MaxAge: '3600'
        NotificationConfiguration:
          TopicConfigurations:
            - Topic:
                Ref: SessionTopic
              Event: s3:ObjectCreated:*
              Filter:
                S3Key:
                  Rules:
                    - Name: prefix
                      Value: videos/
            - Topic:
                Ref: CaptureTopic
              Event: s3:ObjectCreated:*
              Filter:
                S3Key:
                  Rules:
                    - Name: prefix
                      Value: captures/
    RenderBucket:
      Type: AWS::S3::Bucket
      DependsOn:
        - RenderReadyTopic
      Properties:
        AccessControl: BucketOwnerFullControl
        # clean the bucket
        LifecycleConfiguration:
          Rules:
          - ExpirationInDays: 1
            Status: Enabled
        NotificationConfiguration:
          TopicConfigurations:
            - Topic:
                Ref: RenderReadyTopic
              Event: s3:ObjectCreated:*
              Filter:
                S3Key:
                  Rules:
                    - Name: suffix
                      Value: "metadata.json"

    CreateDashgifLambdaInvokePermission:
      Type: AWS::Lambda::Permission
      Properties:
        Action: lambda:InvokeFunction
        Principal: sns.amazonaws.com
        SourceArn:
          Fn::Join:
            - ":"
            - - arn:aws:sns
              - Ref: AWS::Region
              - Ref: AWS::AccountId
              - Ref: RenderStartTopic
        FunctionName:
          Fn::GetAtt:
          - CreateDashgifLambdaFunction
          - Arn
    CreateDashcapturesLambdaInvokePermission:
      Type: AWS::Lambda::Permission
      Properties:
        Action: lambda:InvokeFunction
        Principal: sns.amazonaws.com
        SourceArn:
          Fn::Join:
            - ":"
            - - arn:aws:sns
              - Ref: AWS::Region
              - Ref: AWS::AccountId
              - Ref: RenderStartTopic
        FunctionName:
          Fn::GetAtt:
          - CreateDashcapturesLambdaFunction
          - Arn
    StatusTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Delete
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 10
          WriteCapacityUnits: 10
        TableName: ${self:provider.environment.SESSION_TABLE_NAME}
    LabelsTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Delete
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: frame
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
          - AttributeName: frame
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 10
          WriteCapacityUnits: 10
        TableName: ${self:provider.environment.LABELS_TABLE_NAME}
