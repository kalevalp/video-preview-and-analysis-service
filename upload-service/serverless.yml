frameworkVersion: ">=1.2.0 <2.0.0"

service: et-upload-service # NOTE: update this with your service name

provider:
  name: aws
  runtime: nodejs10.x
  region: eu-west-2
  environment:
    WATCHTOWER_EVENT_KINESIS_STREAM:
      Fn::ImportValue: watchtower-events-kinesis-stream
    DEBUG_WATCHTOWER: 1    # Produces verbose debug prints
    # PROFILE_WATCHTOWER: 1  # Produces timing information
    SERVERLESS_STAGE: ${opt:stage, self:provider.stage}
    SERVERLESS_PROJECT: ${self:service}
    SERVERLESS_REGION: ${opt:region, self:provider.region}
    STATUS_TOPIC_NAME: video-status-topic-${opt:stage, self:provider.stage}
    SESSION_TABLE_NAME: ${self:provider.environment.SERVERLESS_PROJECT}-session-${self:provider.environment.SERVERLESS_STAGE}
    SOURCE_BUCKET:
      Fn::ImportValue: video-service-source-bucket-${self:provider.environment.SERVERLESS_STAGE}
    RENDER_BUCKET:
      Fn::ImportValue: video-service-render-bucket-${self:provider.environment.SERVERLESS_STAGE}
  iamRoleStatements:
    - Effect: Allow             # Required for writing wt events
      Action:
        - 'kinesis:DescribeStream'
        - 'kinesis:PutRecord'
        - 'kinesis:PutRecords'
      Resource:
        Fn::ImportValue: watchtower-events-kinesis-stream-arn
    - Effect: Allow
      Action:
      - S3:ListBucket
      - S3:GetObject
      - S3:PutObject
      Resource: "*"
    - Effect: Allow
      Action:
      - dynamodb:*
      Resource: arn:aws:dynamodb:${self:provider.environment.SERVERLESS_REGION}:*:*
    - Effect: Allow
      Action:
      - SNS:*
      Resource: arn:aws:sns:${self:provider.environment.SERVERLESS_REGION}:*:*
package:
  exclude:
    - test/**
    - .git/**

functions:
  status:
    handler: status/index${self:custom.handlerFilePostfix}.handler
    events:
      - sns: arn:aws:sns:${self:provider.environment.SERVERLESS_REGION}:${self:custom.secrets.ACCOUNT}:video-render-ready-topic-${opt:stage, self:provider.stage} # fn import value not yet working in serverless
  get-metadata:
    handler: get-metadata/index${self:custom.handlerFilePostfix}.handler
    events:
      - http:
          path: metadata/{session}
          method: get
          cors: true
    timeout: 30
  signed-url:
    handler: signed-url/index${self:custom.handlerFilePostfix}.handler
    events:
      - http:
          path: signed-url
          method: get
          cors: true
    timeout: 20

plugins:
  - serverless-mocha-plugin
  - serverless-offline

custom:
  serverless-mocha-plugin:
    functionTemplate: templates/function.ejs
  secrets: ${file(../.secrets.yml)}
  # handlerFilePostfix: '-wrapper'
  # handlerFilePostfix: ''
  handlerFilePostfix: ${env:WT_RUN_NO_RECORDING, '-wrapper'}

resources:
  Resources:
    SessionsTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Delete
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.SESSION_TABLE_NAME}
